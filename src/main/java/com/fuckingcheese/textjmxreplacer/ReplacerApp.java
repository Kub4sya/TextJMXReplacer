/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.fuckingcheese.textjmxreplacer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author kubasya
 */
public class ReplacerApp extends javax.swing.JFrame {
        private File f;
    /**
     * Creates new form ReplacerApp
     */
    public ReplacerApp() {
        initComponents();
    }

    public String getFileType(String fileName) {
        String extension = "";
        int i = fileName.lastIndexOf('.');
        if (i > 0) {
            extension = fileName.substring(i+1);
        }
        return extension;
    }

    public String getShortFileName(String fileName) {
        String extension = "";
        int i = fileName.lastIndexOf('/');
        if (i > 0) {
            extension = fileName.substring(i+1);
        }
        i = extension.lastIndexOf('.');
        if(i > 0)
        {
            extension = extension.substring(0,i);
        }
        return extension;
    }    
    
    public String getIncompliteFilePath(String fileName) {
        String extension = "";
        int i = fileName.lastIndexOf('/');
        if (i > 0) {
            extension = fileName.substring(0,i+1);
        }
        return extension;
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("attach");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        System.out.println(filename);
        System.out.println(getShortFileName(filename));
        System.out.println(getIncompliteFilePath(filename));
        jTextField1.setText(filename);
        if(getFileType(filename).equals("jmx"))
        {
            replaceSelected(filename,getIncompliteFilePath(filename),getShortFileName(filename));
            //jTextField2.setText("Changing...");
        }
        else
        {
            System.out.println("Please load .jmx file");
            ReplacerApp frame = new ReplacerApp();
            JOptionPane.showMessageDialog(frame,"Please load .jmx file");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    public void replaceSelected(String path,String inpath,String name) {
        try {
            // input the file content to the StringBuffer "input"
            BufferedReader file = new BufferedReader(new FileReader(path));
            StringBuffer inputBuffer = new StringBuffer();
            String line;

            while ((line = file.readLine()) != null) {
                inputBuffer.append(line);
                inputBuffer.append('\n');
            }
            file.close();
            String inputStr = inputBuffer.toString();

            System.out.println(inputStr); // display the original file for debugging
            inputStr = replaceRows(inputStr);

            // display the new file for debugging
            System.out.println("----------------------------------\n");

            // write the new string with the replaced line OVER the same file
            FileOutputStream fileOut = new FileOutputStream(inpath+"$"+name+"$.jmx");
            fileOut.write(inputStr.getBytes());
            fileOut.close();
            jTextArea1.append("REPLACE IS SUCCESSFUL"+"\n");
            jTextArea1.append("Your new file is avalible:"+"\n");
            jTextArea1.append(inpath+"$"+name+"$.jmx"+"\n");

        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    public String replaceRows(String s) {
        if (s.contains("<stringProp name=\"Header.value\">192.168.140.16</stringProp>")) {
            s = s.replaceAll("<stringProp name=\"Header.value\">192.168.140.16</stringProp>", "<stringProp name=\"Header.value\">\\${host}</stringProp>");
            System.out.println("url has replaced");
            jTextArea1.append("url has replaced"+"\n");
            //jTextArea1.setText("url has replaced");
        }

        if (s.contains("<stringProp name=\"HTTPSampler.domain\">192.168.140.16</stringProp>")) {
            s = s.replaceAll("<stringProp name=\"HTTPSampler.domain\">192.168.140.16</stringProp>", "<stringProp name=\"HTTPSampler.domain\">\\${host}</stringProp>");
            System.out.println("host has replaced");
            jTextArea1.append("host has replaced"+"\n");
        }

        if (s.contains("<stringProp name=\"HTTPSampler.port\"></stringProp>")) {
            s = s.replaceAll("<stringProp name=\"HTTPSampler.port\"></stringProp>", "<stringProp name=\"HTTPSampler.port\">\\${port}</stringProp>");
            System.out.println("port has replaced");
            jTextArea1.append("port has replaced"+"\n");
        }

        if (s.contains("<stringProp name=\"HTTPSampler.protocol\">https</stringProp>")) {
            s = s.replaceAll("<stringProp name=\"HTTPSampler.protocol\">https</stringProp>", "<stringProp name=\"HTTPSampler.protocol\">\\${protocol}</stringProp>");
            System.out.println("protocol has replaced");
            jTextArea1.append("protocol has replaced"+"\n");
        }
        if (s.contains("<stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>")) {
            s = s.replaceAll("<stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>", "<stringProp name=\"HTTPSampler.contentEncoding\">utf-8</stringProp>");
            System.out.println("encoding has replaced");
            jTextArea1.append("encoding has replaced"+"\n");
        }

        if (s.contains("<stringProp name=\"HTTPSampler.path\">loadtest")) {
            s = s.replaceAll("<stringProp name=\"HTTPSampler.path\">loadtest", "<stringProp name=\"HTTPSampler.path\">\\${appName}");
            System.out.println("path has replaced");
            jTextArea1.append("path has replaced"+"\n");
        }

        if (s.contains("<stringProp name=\"Header.value\">&lt;session id=&quot;")) {
            s = s.replaceAll("(?s)<stringProp name=\"Header.value\">&lt;session id=&quot;.{1,183}", "<stringProp name=\"Header.value\">&lt;\\${Tessa-Session}/&gt;</stringProp>");
            System.out.println("session has replaced");
            jTextArea1.append("session has replaced"+"\n");
        }
        return s;
    }    
    
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReplacerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReplacerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReplacerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReplacerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReplacerApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
